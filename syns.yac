%{
#include "defs.h"
#define YYSTYPE Cell *
%}
%token ID INTEGER REAL WQUOTED SQUOTED INT FLOAT PRINT SEMICOLON COMMA EQUAL ADD SUBTRACT MULTIPLY DIVIDE LPAR RPAR NEWLINE IMPORT INSPECT UNKNOWN;
%defines 
%%
Program
	: Statements				{ $$ = $1; }
Statements
	: Newline					{ }
	| Statement Newline			{ $$ = $1; tree($$); }
	| Statements Statement Newline	{ $$ = $2; tree($$); }
Statement
	: IMPORT Module 			{ $$ = $2; }
	| Assign  					{ $$ = $1; }
	| Print 					{ $$ = $1; }
Newline
	: NEWLINE					{ }
	| NEWLINE Newline			{ }
Assign
	: Variable EQUAL Expression	{ $$ = node(EQUAL, cons($1, $3)); }
Print
	: PRINT Expression			{ $$ = node(PRINT, $2); }
Expression
	: Expression ADD Term		{ $$ = node(ADD, cons($1, $3)); }
	| Expression SUBTRACT Term	{ $$ = node(SUBTRACT, cons($1, $3)); }
	| Term						{ $$ = $1; }
Term
	: Term MULTIPLY Factor		{ $$ = node(MULTIPLY, cons($1, $3)); }
	| Term DIVIDE Factor		{ $$ = node(DIVIDE, cons($1, $3)); }
	| Factor					{ $$ = $1; }
Factor
	: Variable					{ $$ = $1; }
	| Constant					{ $$ = $1; }
	| LPAR Expression RPAR		{ $$ = $2; }
Module
	: INSPECT					{ $$ = leaf(INSPECT, yytext); }
Variable
	: ID						{ $$ = leaf(ID, yytext); }
Constant
	: INTEGER					{ $$ = leaf(INTEGER, yytext); }
	| REAL						{ $$ = leaf(REAL, yytext); }
%%
/*
variables
	: variable					{ $$ = $1; }
	| variables comma variable	{ $$ = node(comma, cons($1,$3)); } 
expressions
	: expression				{ $$ = $1; }
	| Expressions COMMA Expression	{ $$ = node(COMMA, cons($1, $3)); }
*/
#include "lex.yy.c"
void yyerror(char *s) {
	fprintf(stderr, "%s at %d: nearby \"%s\"\n", s, linecounter, yytext);
}
