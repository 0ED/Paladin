%{
#include "defs.h"
#define YYSTYPE Cell *
%}
%token	ID INTEGER REAL INT FLOAT PRINT SEMICOLON COMMA 
	EQUAL ADD SUBTRACT MULTIPLY DIVIDE LPAR RPAR UNKNOWN;
%%
Program
	: Statements				{ $$ = $1; }
Statements
	: Statement					{ $$ = $1; tree($$); }
	| Statements Statement		{ $$ = $2; tree($$); }
Statement
	: Assign SEMICOLON			{ $$ = $1; }
	| Print SEMICOLON			{ $$ = $1; }
Assign
	: Variable EQUAL Expression	{ $$ = node("=", cons($1, $3)); }
Print
	: PRINT Expressions			{ $$ = node("PRINT", $2); }
Expressions
	: Expression				{ $$ = $1; }
	| Expressions COMMA Expression	{ $$ = node(",", cons($1, $3)); }
Expression
	: Expression ADD Term		{ $$ = node("+", cons($1, $3)); }
	| Expression SUBTRACT Term	{ $$ = node("-", cons($1, $3)); }
	| Term						{ $$ = $1; }
Term
	: Term MULTIPLY Factor		{ $$ = node("*", cons($1, $3)); }
	| Term DIVIDE Factor		{ $$ = node("/", cons($1, $3)); }
	| Factor					{ $$ = $1; }
Factor
	: Variable					{ $$ = $1; }
	| Constant					{ $$ = $1; }
	| LPAR Expression RPAR		{ $$ = $2; }
Variable
	: ID						{ $$ = leaf("ID", yytext); }
Constant
	: INTEGER					{ $$ = leaf("INTEGER", yytext); }
	| REAL						{ $$ = leaf("REAL", yytext); }
%%
#include "lex.yy.c"
void yyerror(char *s) {
	fprintf(stderr, "%s at %d: nearby \"%s\"\n", s, linecounter, yytext);
}
